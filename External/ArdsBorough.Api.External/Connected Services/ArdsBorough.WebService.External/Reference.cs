//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArdsBorough.WebService.External
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://tempuri2.org/", ConfigurationName="ArdsBorough.WebService.External.WebService2Soap")]
    public interface WebService2Soap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/AA_HelloWorld_String_Test", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AA_HelloWorld_String_TestAsync(string testName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/AA_HelloWorld_XML_Test", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> AA_HelloWorld_XML_TestAsync(string testName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/getAddressFromPostcode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getAddressFromPostcodeAsync(string username, string password, string council, string searchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/getRoundInfoForUPRNNew", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getRoundInfoForUPRNNewAsync(string council, string UPRN, string PW, string startDateDDsMMsYYYY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/getRoundNameForUPRNAndService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getRoundNameForUPRNAndServiceAsync(string council, string UPRN, string PW, string service3L);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/countSubscriptions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> countSubscriptionsAsync(string council, string WebServPW, string startDateDDsMMsYYYY, string endDateDDsMMsYYYY, string returnUPRNs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/getLatestTruckPositions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getLatestTruckPositionsAsync(string council, string webServicePassword, string UPRN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/getAllIssuesForIssueType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getAllIssuesForIssueTypeAsync(string council, string incabUserName, string userPassword, string webservicePW, string issueType, string startDateDDMMYYYY, string endDateDDMMYYYY, string digTime, string service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetLastTruckPosition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetLastTruckPositionAsync(string council, string dateReq, string timeReq, string regReq, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetIssuesForUPRN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetIssuesForUPRNAsync(string council, string dateReq, string UPRN, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetIssues", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetIssuesAsync(string incabUsername, string incabPW, string webservicePW, string council, string dateReq, string issueStartTime, string issueEndTime, string issueSortField, string issueSortOrder, string issueFilterName, string issueFilterType, string searchAllDates, string propNoName, string propStreet, string UPRN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetTrucksOutToday", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetTrucksOutTodayAsync(string council, string dateReq, string timeReq, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/getRoundCalendarForUPRN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> getRoundCalendarForUPRNAsync(string council, string UPRN, string PW);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/getRoundAndBinInfoForUPRNForNewAdjDates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getRoundAndBinInfoForUPRNForNewAdjDatesAsync(string council, string UPRN, string binID, string webServPassword, string username, string usernamePassword, string startDateDDsMMsYYYY, string endDateDDsMMsYYYY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/readWriteMissedBin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> readWriteMissedBinAsync(string council, string webServicePassword, string user, string userPW, string UPRN, string service3L, string missedYN, string missedDateDDsMMsYY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/readWriteMissedBinByContainerType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> readWriteMissedBinByContainerTypeAsync(string council, string webServicePassword, string user, string userPW, string UPRN, string containerType, string missedYN, string missedDateDDsMMsYY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetZoneBagAssist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetZoneBagAssistAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/UpdateBinDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> UpdateBinDetailsAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binID, string payRef, string DeliverYN, string CollectYN, string StartDateDDsMMsYYYY, string EndDateDDsMMsYYYY, string ReportedDateDDsMMsYYYY, string CompletedDateDDsMMsYYYY, string LeaveBlanksAsIsYN, string BinOrBag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/insertNewBin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> insertNewBinAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string payRef, string DeliverYN, string CollectYN, string StartDateDDsMMsYYYY, string EndDateDDsMMsYYYY, string ReportedDateDDsMMsYYYY, string CompletedDateDDsMMsYYYY, string noOfNewContainersRequired, string BinOrBag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/UpdateAssisted", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> UpdateAssistedAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string AssistedYN01234, string AssistedStartDateDDsMMsYYYY, string AssistedEndDateDDsMMsYYYY, string AssistedLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/CheckAssisted", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> CheckAssistedAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/LLPGXtraUpdateGetAvailableFieldDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> LLPGXtraUpdateGetAvailableFieldDetailsAsync(string council, string webServicePassword, string username, string usernamePassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/LLPGXtraUpdateGetUPRNForDBField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> LLPGXtraUpdateGetUPRNForDBFieldAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRNs, string databaseFieldName, string newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/LLPGXtraGetUPRNCurrentValuesForDBField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> LLPGXtraGetUPRNCurrentValuesForDBFieldAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRNs, string databaseFieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetInCabIssueTextAndIssueCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetInCabIssueTextAndIssueCodeAsync(string council, string webServicePassword, string username, string usernamePassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetBinDetailsForService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetBinDetailsForServiceAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string BinService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetAvailableContainers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetAvailableContainersAsync(string council, string webServicePassword, string username, string usernamePassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetAvailableRounds", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetAvailableRoundsAsync(string council, string webServicePassword, string username, string usernamePassword, string service3L);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetAllRoundDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetAllRoundDetailsAsync(string council, string webServicePassword, string username, string usernamePassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/countBinsForService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> countBinsForServiceAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string BinService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/DeleteBin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> DeleteBinAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetAddressOrUPRN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetAddressOrUPRNAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string Address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/getIssuesAndCollectionStatusForUPRN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getIssuesAndCollectionStatusForUPRNAsync(string ICusername, string ICusernamePassword, string council, string webServicePassword, string UPRN, string lastTimeOnly, string startDateyyyyMMdd, string endDateyyyyMMdd, string serviceFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/LastCollected", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> LastCollectedAsync(string ICusername, string ICusernamePassword, string council, string webServicePassword, string UPRN, bool returnGPS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/WriteIncabLiveData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> WriteIncabLiveDataAsync(
                    string council, 
                    string webServicePassword, 
                    string username, 
                    string usernamePassword, 
                    string Service, 
                    string TimeHHMM, 
                    string Miles, 
                    string HoursWorkedHHMM, 
                    string Logins, 
                    string DriverChecksGood, 
                    string DriverChecksBad, 
                    string CompletedStreets, 
                    string Issues, 
                    string BinNotOutIssues, 
                    string ContaminationIssues, 
                    string DamageIssues, 
                    string OtherIssues, 
                    string ActionIssues, 
                    string HazardsIssues, 
                    string Collected, 
                    string UnCollected, 
                    string GPSPoints, 
                    string TotalDistance, 
                    string TipVisits, 
                    string TipYield);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/KeepAliveCall", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> KeepAliveCallAsync(string clientFull);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/QueryBinEndDates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> QueryBinEndDatesAsync(string council, string webServicePassword, string username, string usernamePassword, string startDateddsMMsyyyy, string endDateddsMMsyyyy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/QueryBinOnType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> QueryBinOnTypeAsync(string council, string webServicePassword, string username, string usernamePassword, string binType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/AHP_NewUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_NewUpdateAsync(
                    string council, 
                    string webServicePassword, 
                    string username, 
                    string usernamePassword, 
                    string UPRN, 
                    string custName, 
                    string custEmail, 
                    string custPhone, 
                    string BagOrCaddy, 
                    string relation, 
                    string crmAhpAdultRef, 
                    string ahpAdultCount, 
                    string ahpAdultEndDate, 
                    string crmAhpChildRef, 
                    string ahpChildCount, 
                    string ahpChildEndDate, 
                    string crmEnquiryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/AHP_RemoveSubscription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_RemoveSubscriptionAsync(string council, string webServicePassword, string userEmail, string usernamePassword, string UPRN, string AdultChildOrBoth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/AHP_OrderNewBags", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_OrderNewBagsAsync(string council, string webServicePassword, string userEmail, string usernamePassword, string UPRN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/AHP_ChangeAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_ChangeAddressAsync(string council, string webServicePassword, string userEmail, string usernamePassword, string oldUPRN, string newUPRN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/AHP_ExtendSubscription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_ExtendSubscriptionAsync(string council, string webServicePassword, string userEmail, string usernamePassword, string uprn, string adultExtendDate_ddsMMsyyyy, string childExtendDate_ddsMMsyyyy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/AHP_SuspendSubscription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_SuspendSubscriptionAsync(string council, string webServicePassword, string userEmail, string usernamePassword, string UPRN, string suspendStartDate_DDsMMsYYYY, string suspendEndDate_DDsMMsYYYY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/AHP_GetDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_GetDetailsAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string crmRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GetAllUPRNsForDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetAllUPRNsForDateAsync(string council, string webServicePassword, string username, string usernamePassword, string dateRequiredDDsMMsYYYY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/BinInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> BinInsertAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binType, string payRef, string DeliverYN, string CollectYN, string StartDateDDsMMsYYYY, string EndDateDDsMMsYYYY, string ReportedDateDDsMMsYYYY, string CompletedDateDDsMMsYYYY, string noOfNewContainersRequired);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/BinUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> BinUpdateAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binID, string binType, string payRef, string DeliverYN, string CollectYN, string StartDateDDsMMsYYYY, string EndDateDDsMMsYYYY, string ReportedDateDDsMMsYYYY, string CompletedDateDDsMMsYYYY, string LeaveBlanksAsIsYN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/BinDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> BinDeleteAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/LargeHouseholds", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> LargeHouseholdsAsync(string council, string webServicePassword, string username, string usernamePassword, string binType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/CachedCalendar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> CachedCalendarAsync(string council, string webServicePassword, string username, string usernamePassword, string splitOutRounds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/GardenSubscription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GardenSubscriptionAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binsAtProperty, string totalNoSubsRequired, string subscriptionStartDate, string subscriptionEndDate, string newPayRef, string binType, string gardenContainerDeliveryComments, string crmGardenRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/Garden_RemoveSubscription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> Garden_RemoveSubscriptionAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string endDate_ddsMMsyyyy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/ValidUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> ValidUserAsync(string council, string email, string userPassword, string portal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/OBSOLETE_getRoundInfoForUPRN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> OBSOLETE_getRoundInfoForUPRNAsync(string council, string UPRN, string PW);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri2.org/OBSOLETE_getRoundAndBinInfoForUPRNorBinID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> OBSOLETE_getRoundAndBinInfoForUPRNorBinIDAsync(string council, string UPRN, string binID, string webServPassword, string username, string usernamePassword, string startDateDDsMMsYYYY, string endDateDDsMMsYYYY);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public interface WebService2SoapChannel : ArdsBorough.WebService.External.WebService2Soap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public partial class WebService2SoapClient : System.ServiceModel.ClientBase<ArdsBorough.WebService.External.WebService2Soap>, ArdsBorough.WebService.External.WebService2Soap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WebService2SoapClient(EndpointConfiguration endpointConfiguration) : 
                base(WebService2SoapClient.GetBindingForEndpoint(endpointConfiguration), WebService2SoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebService2SoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WebService2SoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebService2SoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WebService2SoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebService2SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> AA_HelloWorld_String_TestAsync(string testName)
        {
            return base.Channel.AA_HelloWorld_String_TestAsync(testName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> AA_HelloWorld_XML_TestAsync(string testName)
        {
            return base.Channel.AA_HelloWorld_XML_TestAsync(testName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getAddressFromPostcodeAsync(string username, string password, string council, string searchString)
        {
            return base.Channel.getAddressFromPostcodeAsync(username, password, council, searchString);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getRoundInfoForUPRNNewAsync(string council, string UPRN, string PW, string startDateDDsMMsYYYY)
        {
            return base.Channel.getRoundInfoForUPRNNewAsync(council, UPRN, PW, startDateDDsMMsYYYY);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getRoundNameForUPRNAndServiceAsync(string council, string UPRN, string PW, string service3L)
        {
            return base.Channel.getRoundNameForUPRNAndServiceAsync(council, UPRN, PW, service3L);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> countSubscriptionsAsync(string council, string WebServPW, string startDateDDsMMsYYYY, string endDateDDsMMsYYYY, string returnUPRNs)
        {
            return base.Channel.countSubscriptionsAsync(council, WebServPW, startDateDDsMMsYYYY, endDateDDsMMsYYYY, returnUPRNs);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getLatestTruckPositionsAsync(string council, string webServicePassword, string UPRN)
        {
            return base.Channel.getLatestTruckPositionsAsync(council, webServicePassword, UPRN);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getAllIssuesForIssueTypeAsync(string council, string incabUserName, string userPassword, string webservicePW, string issueType, string startDateDDMMYYYY, string endDateDDMMYYYY, string digTime, string service)
        {
            return base.Channel.getAllIssuesForIssueTypeAsync(council, incabUserName, userPassword, webservicePW, issueType, startDateDDMMYYYY, endDateDDMMYYYY, digTime, service);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetLastTruckPositionAsync(string council, string dateReq, string timeReq, string regReq, string username, string password)
        {
            return base.Channel.GetLastTruckPositionAsync(council, dateReq, timeReq, regReq, username, password);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetIssuesForUPRNAsync(string council, string dateReq, string UPRN, string username, string password)
        {
            return base.Channel.GetIssuesForUPRNAsync(council, dateReq, UPRN, username, password);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetIssuesAsync(string incabUsername, string incabPW, string webservicePW, string council, string dateReq, string issueStartTime, string issueEndTime, string issueSortField, string issueSortOrder, string issueFilterName, string issueFilterType, string searchAllDates, string propNoName, string propStreet, string UPRN)
        {
            return base.Channel.GetIssuesAsync(incabUsername, incabPW, webservicePW, council, dateReq, issueStartTime, issueEndTime, issueSortField, issueSortOrder, issueFilterName, issueFilterType, searchAllDates, propNoName, propStreet, UPRN);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetTrucksOutTodayAsync(string council, string dateReq, string timeReq, string username, string password)
        {
            return base.Channel.GetTrucksOutTodayAsync(council, dateReq, timeReq, username, password);
        }
        
        public System.Threading.Tasks.Task<string> getRoundCalendarForUPRNAsync(string council, string UPRN, string PW)
        {
            return base.Channel.getRoundCalendarForUPRNAsync(council, UPRN, PW);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getRoundAndBinInfoForUPRNForNewAdjDatesAsync(string council, string UPRN, string binID, string webServPassword, string username, string usernamePassword, string startDateDDsMMsYYYY, string endDateDDsMMsYYYY)
        {
            return base.Channel.getRoundAndBinInfoForUPRNForNewAdjDatesAsync(council, UPRN, binID, webServPassword, username, usernamePassword, startDateDDsMMsYYYY, endDateDDsMMsYYYY);
        }
        
        public System.Threading.Tasks.Task<string> readWriteMissedBinAsync(string council, string webServicePassword, string user, string userPW, string UPRN, string service3L, string missedYN, string missedDateDDsMMsYY)
        {
            return base.Channel.readWriteMissedBinAsync(council, webServicePassword, user, userPW, UPRN, service3L, missedYN, missedDateDDsMMsYY);
        }
        
        public System.Threading.Tasks.Task<string> readWriteMissedBinByContainerTypeAsync(string council, string webServicePassword, string user, string userPW, string UPRN, string containerType, string missedYN, string missedDateDDsMMsYY)
        {
            return base.Channel.readWriteMissedBinByContainerTypeAsync(council, webServicePassword, user, userPW, UPRN, containerType, missedYN, missedDateDDsMMsYY);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetZoneBagAssistAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN)
        {
            return base.Channel.GetZoneBagAssistAsync(council, webServicePassword, username, usernamePassword, UPRN);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> UpdateBinDetailsAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binID, string payRef, string DeliverYN, string CollectYN, string StartDateDDsMMsYYYY, string EndDateDDsMMsYYYY, string ReportedDateDDsMMsYYYY, string CompletedDateDDsMMsYYYY, string LeaveBlanksAsIsYN, string BinOrBag)
        {
            return base.Channel.UpdateBinDetailsAsync(council, webServicePassword, username, usernamePassword, UPRN, binID, payRef, DeliverYN, CollectYN, StartDateDDsMMsYYYY, EndDateDDsMMsYYYY, ReportedDateDDsMMsYYYY, CompletedDateDDsMMsYYYY, LeaveBlanksAsIsYN, BinOrBag);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> insertNewBinAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string payRef, string DeliverYN, string CollectYN, string StartDateDDsMMsYYYY, string EndDateDDsMMsYYYY, string ReportedDateDDsMMsYYYY, string CompletedDateDDsMMsYYYY, string noOfNewContainersRequired, string BinOrBag)
        {
            return base.Channel.insertNewBinAsync(council, webServicePassword, username, usernamePassword, UPRN, payRef, DeliverYN, CollectYN, StartDateDDsMMsYYYY, EndDateDDsMMsYYYY, ReportedDateDDsMMsYYYY, CompletedDateDDsMMsYYYY, noOfNewContainersRequired, BinOrBag);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> UpdateAssistedAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string AssistedYN01234, string AssistedStartDateDDsMMsYYYY, string AssistedEndDateDDsMMsYYYY, string AssistedLocation)
        {
            return base.Channel.UpdateAssistedAsync(council, webServicePassword, username, usernamePassword, UPRN, AssistedYN01234, AssistedStartDateDDsMMsYYYY, AssistedEndDateDDsMMsYYYY, AssistedLocation);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> CheckAssistedAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN)
        {
            return base.Channel.CheckAssistedAsync(council, webServicePassword, username, usernamePassword, UPRN);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> LLPGXtraUpdateGetAvailableFieldDetailsAsync(string council, string webServicePassword, string username, string usernamePassword)
        {
            return base.Channel.LLPGXtraUpdateGetAvailableFieldDetailsAsync(council, webServicePassword, username, usernamePassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> LLPGXtraUpdateGetUPRNForDBFieldAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRNs, string databaseFieldName, string newValue)
        {
            return base.Channel.LLPGXtraUpdateGetUPRNForDBFieldAsync(council, webServicePassword, username, usernamePassword, UPRNs, databaseFieldName, newValue);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> LLPGXtraGetUPRNCurrentValuesForDBFieldAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRNs, string databaseFieldName)
        {
            return base.Channel.LLPGXtraGetUPRNCurrentValuesForDBFieldAsync(council, webServicePassword, username, usernamePassword, UPRNs, databaseFieldName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetInCabIssueTextAndIssueCodeAsync(string council, string webServicePassword, string username, string usernamePassword)
        {
            return base.Channel.GetInCabIssueTextAndIssueCodeAsync(council, webServicePassword, username, usernamePassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetBinDetailsForServiceAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string BinService)
        {
            return base.Channel.GetBinDetailsForServiceAsync(council, webServicePassword, username, usernamePassword, UPRN, BinService);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetAvailableContainersAsync(string council, string webServicePassword, string username, string usernamePassword)
        {
            return base.Channel.GetAvailableContainersAsync(council, webServicePassword, username, usernamePassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetAvailableRoundsAsync(string council, string webServicePassword, string username, string usernamePassword, string service3L)
        {
            return base.Channel.GetAvailableRoundsAsync(council, webServicePassword, username, usernamePassword, service3L);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetAllRoundDetailsAsync(string council, string webServicePassword, string username, string usernamePassword)
        {
            return base.Channel.GetAllRoundDetailsAsync(council, webServicePassword, username, usernamePassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> countBinsForServiceAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string BinService)
        {
            return base.Channel.countBinsForServiceAsync(council, webServicePassword, username, usernamePassword, UPRN, BinService);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> DeleteBinAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binID)
        {
            return base.Channel.DeleteBinAsync(council, webServicePassword, username, usernamePassword, UPRN, binID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetAddressOrUPRNAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string Address)
        {
            return base.Channel.GetAddressOrUPRNAsync(council, webServicePassword, username, usernamePassword, UPRN, Address);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getIssuesAndCollectionStatusForUPRNAsync(string ICusername, string ICusernamePassword, string council, string webServicePassword, string UPRN, string lastTimeOnly, string startDateyyyyMMdd, string endDateyyyyMMdd, string serviceFilter)
        {
            return base.Channel.getIssuesAndCollectionStatusForUPRNAsync(ICusername, ICusernamePassword, council, webServicePassword, UPRN, lastTimeOnly, startDateyyyyMMdd, endDateyyyyMMdd, serviceFilter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> LastCollectedAsync(string ICusername, string ICusernamePassword, string council, string webServicePassword, string UPRN, bool returnGPS)
        {
            return base.Channel.LastCollectedAsync(ICusername, ICusernamePassword, council, webServicePassword, UPRN, returnGPS);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> WriteIncabLiveDataAsync(
                    string council, 
                    string webServicePassword, 
                    string username, 
                    string usernamePassword, 
                    string Service, 
                    string TimeHHMM, 
                    string Miles, 
                    string HoursWorkedHHMM, 
                    string Logins, 
                    string DriverChecksGood, 
                    string DriverChecksBad, 
                    string CompletedStreets, 
                    string Issues, 
                    string BinNotOutIssues, 
                    string ContaminationIssues, 
                    string DamageIssues, 
                    string OtherIssues, 
                    string ActionIssues, 
                    string HazardsIssues, 
                    string Collected, 
                    string UnCollected, 
                    string GPSPoints, 
                    string TotalDistance, 
                    string TipVisits, 
                    string TipYield)
        {
            return base.Channel.WriteIncabLiveDataAsync(council, webServicePassword, username, usernamePassword, Service, TimeHHMM, Miles, HoursWorkedHHMM, Logins, DriverChecksGood, DriverChecksBad, CompletedStreets, Issues, BinNotOutIssues, ContaminationIssues, DamageIssues, OtherIssues, ActionIssues, HazardsIssues, Collected, UnCollected, GPSPoints, TotalDistance, TipVisits, TipYield);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> KeepAliveCallAsync(string clientFull)
        {
            return base.Channel.KeepAliveCallAsync(clientFull);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> QueryBinEndDatesAsync(string council, string webServicePassword, string username, string usernamePassword, string startDateddsMMsyyyy, string endDateddsMMsyyyy)
        {
            return base.Channel.QueryBinEndDatesAsync(council, webServicePassword, username, usernamePassword, startDateddsMMsyyyy, endDateddsMMsyyyy);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> QueryBinOnTypeAsync(string council, string webServicePassword, string username, string usernamePassword, string binType)
        {
            return base.Channel.QueryBinOnTypeAsync(council, webServicePassword, username, usernamePassword, binType);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_NewUpdateAsync(
                    string council, 
                    string webServicePassword, 
                    string username, 
                    string usernamePassword, 
                    string UPRN, 
                    string custName, 
                    string custEmail, 
                    string custPhone, 
                    string BagOrCaddy, 
                    string relation, 
                    string crmAhpAdultRef, 
                    string ahpAdultCount, 
                    string ahpAdultEndDate, 
                    string crmAhpChildRef, 
                    string ahpChildCount, 
                    string ahpChildEndDate, 
                    string crmEnquiryID)
        {
            return base.Channel.AHP_NewUpdateAsync(council, webServicePassword, username, usernamePassword, UPRN, custName, custEmail, custPhone, BagOrCaddy, relation, crmAhpAdultRef, ahpAdultCount, ahpAdultEndDate, crmAhpChildRef, ahpChildCount, ahpChildEndDate, crmEnquiryID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_RemoveSubscriptionAsync(string council, string webServicePassword, string userEmail, string usernamePassword, string UPRN, string AdultChildOrBoth)
        {
            return base.Channel.AHP_RemoveSubscriptionAsync(council, webServicePassword, userEmail, usernamePassword, UPRN, AdultChildOrBoth);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_OrderNewBagsAsync(string council, string webServicePassword, string userEmail, string usernamePassword, string UPRN)
        {
            return base.Channel.AHP_OrderNewBagsAsync(council, webServicePassword, userEmail, usernamePassword, UPRN);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_ChangeAddressAsync(string council, string webServicePassword, string userEmail, string usernamePassword, string oldUPRN, string newUPRN)
        {
            return base.Channel.AHP_ChangeAddressAsync(council, webServicePassword, userEmail, usernamePassword, oldUPRN, newUPRN);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_ExtendSubscriptionAsync(string council, string webServicePassword, string userEmail, string usernamePassword, string uprn, string adultExtendDate_ddsMMsyyyy, string childExtendDate_ddsMMsyyyy)
        {
            return base.Channel.AHP_ExtendSubscriptionAsync(council, webServicePassword, userEmail, usernamePassword, uprn, adultExtendDate_ddsMMsyyyy, childExtendDate_ddsMMsyyyy);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_SuspendSubscriptionAsync(string council, string webServicePassword, string userEmail, string usernamePassword, string UPRN, string suspendStartDate_DDsMMsYYYY, string suspendEndDate_DDsMMsYYYY)
        {
            return base.Channel.AHP_SuspendSubscriptionAsync(council, webServicePassword, userEmail, usernamePassword, UPRN, suspendStartDate_DDsMMsYYYY, suspendEndDate_DDsMMsYYYY);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> AHP_GetDetailsAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string crmRef)
        {
            return base.Channel.AHP_GetDetailsAsync(council, webServicePassword, username, usernamePassword, UPRN, crmRef);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetAllUPRNsForDateAsync(string council, string webServicePassword, string username, string usernamePassword, string dateRequiredDDsMMsYYYY)
        {
            return base.Channel.GetAllUPRNsForDateAsync(council, webServicePassword, username, usernamePassword, dateRequiredDDsMMsYYYY);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> BinInsertAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binType, string payRef, string DeliverYN, string CollectYN, string StartDateDDsMMsYYYY, string EndDateDDsMMsYYYY, string ReportedDateDDsMMsYYYY, string CompletedDateDDsMMsYYYY, string noOfNewContainersRequired)
        {
            return base.Channel.BinInsertAsync(council, webServicePassword, username, usernamePassword, UPRN, binType, payRef, DeliverYN, CollectYN, StartDateDDsMMsYYYY, EndDateDDsMMsYYYY, ReportedDateDDsMMsYYYY, CompletedDateDDsMMsYYYY, noOfNewContainersRequired);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> BinUpdateAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binID, string binType, string payRef, string DeliverYN, string CollectYN, string StartDateDDsMMsYYYY, string EndDateDDsMMsYYYY, string ReportedDateDDsMMsYYYY, string CompletedDateDDsMMsYYYY, string LeaveBlanksAsIsYN)
        {
            return base.Channel.BinUpdateAsync(council, webServicePassword, username, usernamePassword, UPRN, binID, binType, payRef, DeliverYN, CollectYN, StartDateDDsMMsYYYY, EndDateDDsMMsYYYY, ReportedDateDDsMMsYYYY, CompletedDateDDsMMsYYYY, LeaveBlanksAsIsYN);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> BinDeleteAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binID)
        {
            return base.Channel.BinDeleteAsync(council, webServicePassword, username, usernamePassword, UPRN, binID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> LargeHouseholdsAsync(string council, string webServicePassword, string username, string usernamePassword, string binType)
        {
            return base.Channel.LargeHouseholdsAsync(council, webServicePassword, username, usernamePassword, binType);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> CachedCalendarAsync(string council, string webServicePassword, string username, string usernamePassword, string splitOutRounds)
        {
            return base.Channel.CachedCalendarAsync(council, webServicePassword, username, usernamePassword, splitOutRounds);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GardenSubscriptionAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string binsAtProperty, string totalNoSubsRequired, string subscriptionStartDate, string subscriptionEndDate, string newPayRef, string binType, string gardenContainerDeliveryComments, string crmGardenRef)
        {
            return base.Channel.GardenSubscriptionAsync(council, webServicePassword, username, usernamePassword, UPRN, binsAtProperty, totalNoSubsRequired, subscriptionStartDate, subscriptionEndDate, newPayRef, binType, gardenContainerDeliveryComments, crmGardenRef);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> Garden_RemoveSubscriptionAsync(string council, string webServicePassword, string username, string usernamePassword, string UPRN, string endDate_ddsMMsyyyy)
        {
            return base.Channel.Garden_RemoveSubscriptionAsync(council, webServicePassword, username, usernamePassword, UPRN, endDate_ddsMMsyyyy);
        }
        
        public System.Threading.Tasks.Task<int> ValidUserAsync(string council, string email, string userPassword, string portal)
        {
            return base.Channel.ValidUserAsync(council, email, userPassword, portal);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> OBSOLETE_getRoundInfoForUPRNAsync(string council, string UPRN, string PW)
        {
            return base.Channel.OBSOLETE_getRoundInfoForUPRNAsync(council, UPRN, PW);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> OBSOLETE_getRoundAndBinInfoForUPRNorBinIDAsync(string council, string UPRN, string binID, string webServPassword, string username, string usernamePassword, string startDateDDsMMsYYYY, string endDateDDsMMsYYYY)
        {
            return base.Channel.OBSOLETE_getRoundAndBinInfoForUPRNorBinIDAsync(council, UPRN, binID, webServPassword, username, usernamePassword, startDateDDsMMsYYYY, endDateDDsMMsYYYY);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WebService2Soap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.WebService2Soap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WebService2Soap))
            {
                return new System.ServiceModel.EndpointAddress("https://collections-ardsandnorthdown.azurewebsites.net/WebService2.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.WebService2Soap12))
            {
                return new System.ServiceModel.EndpointAddress("https://collections-ardsandnorthdown.azurewebsites.net/WebService2.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            WebService2Soap,
            
            WebService2Soap12,
        }
    }
}
